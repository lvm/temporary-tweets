#!/usr/bin/env python3

import sys
import json
import twitter
import argparse
from datetime import datetime as dt
from os import environ as env


USER_ID = env.get("TWITTER_USER_ID")
CONSUMER_KEY = env.get("TWITTER_CONSUMER_KEY")
CONSUMER_SECRET = env.get("TWITTER_CONSUMER_SECRET")
ACCESS_TOKEN_KEY = env.get("TWITTER_ACCESS_TOKEN_KEY")
ACCESS_TOKEN_SECRET = env.get("TWITTER_ACCESS_TOKEN_SECRET")


def today():
    return dt.strftime(dt.now(), "%Y-%m-%d")


def get_timeline(api=None, pinned_status=0):
    return api.GetUserTimeline(count=300)


def can_remove_replies(status={}):
    return status.in_reply_to_user_id


def can_remove_favs(status={}):
    return status.favorited


def backup_tweets(timeline=[]):
    date = today()
    with open(f"timeline-{date}.json", "w+") as j:
        for status in timeline:
            j.write(json.dumps(status._json))
            j.write("\n")


def remove_tweets(timeline=[], favorites=False, replies=False, dry_run=False):
    to_be_removed = []
    for status in timeline[::-1]:
        rm_fav = can_remove_favs(status)
        rm_reply = can_remove_replies(status)
        can_remove = (
            (not rm_fav or favorites)
            and (not rm_reply or replies)
            or status.in_reply_to_status_id in to_be_removed
        )

        if can_remove:
            to_be_removed += [status.id]
            print(f"-> Removed: {status.id} - {status.text}")
        else:
            print(f"-> Stays: {status.id} - {status.text}")

    if not dry_run:
        for _id in to_be_removed:
            api.DestroyStatus(int(_id))


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--replies-included",
        action="store_true",
        default=False,
        help="Will remove all posts, Replies included (Default: False).",
    )
    parser.add_argument(
        "--fav-included",
        action="store_true",
        default=False,
        help="Will remove all posts, Favorited included (Default: False).",
    )
    parser.add_argument(
        "--dry-run", action="store_true", default=False, help="Just simulate."
    )

    args = parser.parse_args()

    if not (
        "TWITTER_CONSUMER_KEY" in env
        and "TWITTER_CONSUMER_SECRET" in env
        and "TWITTER_ACCESS_TOKEN_KEY" in env
        and "TWITTER_ACCESS_TOKEN_SECRET" in env
    ):
        sys.stderr.write("Twitter API credentials not set.")
        sys.exit(1)
    else:
        api = twitter.Api(
            CONSUMER_KEY, CONSUMER_SECRET, ACCESS_TOKEN_KEY, ACCESS_TOKEN_SECRET
        )
        timeline = get_timeline(api)
        backup_tweets(timeline)
        remove_tweets(timeline, args.fav_included, args.replies_included, args.dry_run)
        sys.exit(0)
